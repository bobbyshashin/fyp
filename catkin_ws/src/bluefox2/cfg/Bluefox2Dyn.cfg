#!/usr/bin/env python2
PACKAGE = "bluefox2"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("fps", double_t, 0, "Frames per second", 20, 1, 200)

# Area of interest
gen.add("width", int_t, 0,
        "AOI width",
        0, 0, 2048)
gen.add("height", int_t, 0,
        "AOI height",
        0, 0, 2048)

# Pixel Format
# http://www.matrix-vision.com/manuals/SDK_CPP/classmvIMPACT_1_1acquire_1_1ImageDestination.html#aee7cf6edaa07a5eb0d39b9b04329751e
idpf_enum = gen.enum(
    [gen.const("idpf_auto", int_t, 0,
               "The driver will decide which format to use"),
     gen.const("idpf_raw", int_t, 1, "An unprocessed block of data"),
     gen.const("idpf_mono8", int_t, 2, "A mono channel 8 bit"),
     gen.const("idpf_mono16", int_t, 9, "A mono channel 16 bit"),
     gen.const("idpf_rgb888_packed", int_t, 10, "RGB with 24 bit per pixel"),
     gen.const("idpf_bgr888_packed", int_t, 22, "BGR with 24 bit per pixel")],
    "Defines the pixel format of the resulting image")
gen.add("idpf", int_t, 0,
        "Defines the pixel format of the resulting image",
        0, 0, 22, edit_method=idpf_enum)

# Camera binning mode
# http://www.matrix-vision.com/manuals/SDK_CPP/group__DeviceSpecificInterface.html#ga915d7e18807e69567ac466541b66313b
cbm_enum = gen.enum(
    [gen.const("cbm_off", int_t, 0, "No binning"),
     gen.const("cbm_binning_h", int_t, 0x1,
               "Horizontal binning (combines 2 adjacent columns)"),
     gen.const("cbm_binning_v", int_t, 0x2,
               "Vertical binning (combines 2 adjacent rows)"),
     gen.const("cbm_binning_hv", int_t, 0x3,
               "Horizontal and vertical binning")],
    "Defines valid binning modes for the camera")
gen.add("cbm", int_t, 0,
        "Camera binning mode",
        0, 0, 3, edit_method=cbm_enum)

# Automatic exposure control
gen.add("aec", bool_t, 0,
        "Automatic exposure control",
        False)
# Expose us
gen.add("expose_us", int_t, 0,
        "Exposure time for an image in us",
        10000, 10, 100000)

# Automatic gain control
gen.add("agc", bool_t, 0,
        "Automatic gain control",
        False)
# Gain db
gen.add("gain_db", double_t, 0,
        "Gain in dB",
        0.0, 0.0, 32.0)

# Auto control parameters
acs_enum = gen.enum(
    [gen.const("acs_unavailable", int_t, -1,
               "auto control parameters not available"),
     gen.const("acs_slow", int_t, 0,
               "coverge slowly to desired value"),
     gen.const("acs_medium", int_t, 1,
               "converge to desired value at medium speed"),
     gen.const("acs_fast", int_t, 2,
               "converge fast to desired value")],
    "Defines valid AutoControlSpeed modes")
gen.add("acs", int_t, 0,
        "Auto control speed",
        0, -1, 2, edit_method=acs_enum)

# Desired average grey value
gen.add("des_grey_value", int_t, 0,
        "desired average grey value",
        85, 0, 255)

# High dynamic range
gen.add("hdr", bool_t, 0,
        "High dynamic range",
        False)

# Dark current filter mode
dcfm_enum = gen.enum(
    [gen.const("dcfm_off", int_t, 0, "filter is switched off"),
     gen.const("dcfm_on", int_t, 1, "filter is switched on"),
     gen.const("dcfm_calibrate", int_t, 2,
               "calculate dark current corrention image"),
     gen.const("correction_image", int_t, 3,
               "replace captured image with the last correction image")],
    "Defines valid modes for the dark current filter")
gen.add("dcfm", int_t, 0,
        "Operation mode of the dark current filter",
        0, 0, 3, edit_method=dcfm_enum)

# Camera pixel clock
cpc_enum = gen.enum(
    [gen.const("cpc_12000", int_t, 12000, "12 Mhz"),
     gen.const("cpc_20000", int_t, 20000, "20 Mhz"),
     gen.const("cpc_24000", int_t, 24000, "24 Mhz"),
     gen.const("cpc_27000", int_t, 27000, "27 Mhz"),
     gen.const("cpc_32000", int_t, 32000, "32 Mhz"),
     gen.const("cpc_40000", int_t, 40000, "40 Mhz"),
     gen.const("cpc_50000", int_t, 50000, "50 Mhz")],
    "Defines valid camrea pixel frequencies")
gen.add("cpc", int_t, 0,
        "Pixel clock of the camera sensor in KHz",
        40000, 12000, 50000, edit_method=cpc_enum)

# Camera trigger mode
# http://www.matrix-vision.com/manuals/SDK_CPP/group__DeviceSpecificInterface.html#gga7d880247a3af52241ce96ba703c526a1a874df7a22c70e15b7d6e49fb851b22ef
ctm_enum = gen.enum(
    [gen.const("ctm_continuous", int_t, 0,
               "continuously exposes images"),
     gen.const("ctm_on_demand", int_t, 1,
               "start frame expose when software asks for an image"),
     gen.const("ctm_on_low_level", int_t, 2,
               "start the exposure of a frame when the trigger input is below the trigger threshold"),
     gen.const("ctm_on_high_level", int_t, 3,
               "start the exposure of a frame when the trigger input is above the trigger threshold"),
     gen.const("ctm_on_falling_edge", int_t, 4,
               "start the exposure of a frame when the trigger input level changes from high to low"),
     gen.const("ctm_on_rising_edge", int_t, 5,
               "start the exposure of a frame when the trigger input level changes from low to high"),
     gen.const("hard_sync", int_t, -1,
               "hardware sync with master and slave (stereo only, hack)")],
    "Defines valid camera sensor trigger modes")
gen.add("ctm", int_t, 0,
        "Camera trigger mode",
        1, -1, 5, edit_method=ctm_enum)

# Camera trigger source
# http://www.matrix-vision.com/manuals/SDK_CPP/group__DeviceSpecificInterface.html#ga18243d80e95a98e9596ed83ed96cdb54
cts_enum = gen.enum(
    [gen.const("cts_unavailable", int_t, -1,
               "trigger mode is continuous or on_demand"),
     gen.const("cts_dig_in_0", int_t, 0,
               "Uses digital input 0 as the source for the trigger signal"),
     gen.const("cts_dig_in_1", int_t, 1,
               "Use digital input 1 as the source for the trigger signal")],
    "Defined valie camera sensor trigger source values")
gen.add("cts", int_t, 0,
        "Camera trigger source",
        -1, -1, 1, edit_method=cts_enum)

# Fix this to request count
# This is just prefilling the capture queue
gen.add("request", int_t, 0,
        "Prefill capture queue by request",
        0, 0, 4)

# White balance paramter
wbp_enum = gen.enum([gen.const("wbp_unavailable", int_t, -1, "not available"),
                     gen.const("wbp_tungsten", int_t, 0, "Tungsten"),
                     gen.const("wbp_halogen", int_t, 1, "Halogen"),
                     gen.const("wbp_fluorescent", int_t, 2, "Fluorescent"),
                     gen.const("wbp_daylight", int_t, 3, "Day light"),
                     gen.const("wbp_photolight", int_t, 4, "Photo Light"),
                     gen.const("wbp_bluesky", int_t, 5, "Blue Sky"),
                     gen.const("wbp_user1", int_t, 6, "User1"),
                     gen.const("wbp_calibrate", int_t, 10, "Calibrate")],
                    "An enum to set white balance paramter")
gen.add("wbp", int_t, 0,
        "white balance parameter",
        6, -1, 10, edit_method=wbp_enum)

gen.add("r_gain", double_t, 0, "red gain", 1, 0.1, 10)
gen.add("g_gain", double_t, 0, "green gain", 1, 0.1, 10)
gen.add("b_gain", double_t, 0, "blue gain", 1, 0.1, 10)

# Mirror mode
mm_enum = gen.enum([gen.const("mm_off", int_t, 0, "Mirror mode off"),
                    gen.const("mm_topdown", int_t, 1, "Top down"),
                    gen.const("mm_leftright", int_t, 2, "Left right"),
                    gen.const("mm_topdown_and_leftright", int_t, 3,
                              "Top down and left right")],
                   "An enum to set mirror mode")

# Temporarily disable mm in dynamic reconfigure, you can only set it through
# launch file
# gen.add("mm", int_t, 0, "mirror mode", 0, 0, 3, edit_method=mm_enum)

exit(gen.generate(PACKAGE, "bluefox2", "Bluefox2Dyn"))
