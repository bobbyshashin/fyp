#include "main.h"
#include <ros/ros.h>
#include <Eigen/Eigen>
#include <math.h>
//#include <tf/transform_broadcaster.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Vector3.h>
#include <nav_msgs/Odometry.h>
//#define FRAME_CNT 5000
#include <string>
#include <iostream> 
#include <stdio.h>
#include <string>
#include <cctype>
#define RX_TIMEOUT 30
#define TX_TIMEOUT 30
#define BUF_LEN 1
//This node only send single byte.
using namespace Eigen;
using namespace std;
string name;
string target_status;

void ugv_callback(const nav_msgs::Odometry::ConstPtr &msg) {
    
    float x_vel = msg->twist.twist.linear.x;
    float y_vel = msg->twist.twist.linear.y;
    float z_ang = msg->twist.twist.angular.z;

    Quaterniond ori(msg->pose.pose.orientation.w, msg->pose.pose.orientation.x,msg->pose.pose.orientation.y,msg->pose.pose.orientation.z);
    Matrix3d Rgi = ori.toRotationMatrix();
    float phi = asin(Rgi(2,1));
    float yaw = acos(Rgi(1,1)/cos(phi));

    unsigned char temp[4];

    temp[0] = 0xa5;// header
    temp[1] = 0x18;// packet lenth
    temp[2] = 0x00;// packet index counter
    temp[3] = 0x00;// identifier

    float sensor[4] = { x_vel, y_vel, z_ang, yaw };

    unsigned char* data = (unsigned char*)malloc(5 * sizeof(float));

    memcpy(data, temp, 4*sizeof(unsigned char));
    memcpy(data + 4, sensor, 4*sizeof(float));

    uint32_t send_total_len = 1;
    send_total_len += write_serial(data, 20, RX_TIMEOUT);
}

void ugv_targetVelocityCallback(const geometry_msgs::Vector3& msg){

    float x = msg.x;
    float y = msg.y;
    float omega = msg.z;

    unsigned char temp[4];
    //strcpy((char*)data, data_str.c_str());
    temp[0] = 0xa5;
    temp[1] = 0x10;
    temp[2] = 0x00;
    temp[3] = 0x01;

    float target[3] = { x, y, omega };

    unsigned char* data = (unsigned char*)malloc(4 * sizeof(float));

    memcpy(data, temp, 4*sizeof(unsigned char));
    memcpy(data + 4, target, 3*sizeof(float));

    uint32_t send_total_len = 1;
    send_total_len += write_serial(data, 16, RX_TIMEOUT);

}

int main(int argc, char* argv[])
{


    ros::init(argc, argv, "serial_node");
    ros::NodeHandle n("~");
    name = ros::this_node::getName();
   
    ros::Subscriber s1 = n.subscribe("/n3_sdk/odometry", 1, ugv_callback);
    ros::Subscriber s2 = n.subscribe("/ugv_target_velocity", 1, ugv_targetVelocityCallback);
    std::string port;
    if (n.hasParam("port"))
        n.getParam("port", port);
    else {
        ROS_ERROR("%s: must provide a port", name.c_str());
        return -1;
    }

    const char* port_name = port.c_str();

    unsigned char* readData = (unsigned char*)malloc(6 * sizeof(float));


    if(connect_serial(port_name) == -1)
	{
		printf("serial open error!\n");
		return -1;
	}

    //ros::Rate r(1000);

    while(n.ok()){


        ros::spinOnce();
        /*
	cout << "looping" << endl;
	UART_Recv(0, readData, 1);
	for(int i=0;i<24;i++)
	    cout << readData[i];
	cout << endl;
        */
        
    }
    
    disconnect_serial();
    return 0;

}
