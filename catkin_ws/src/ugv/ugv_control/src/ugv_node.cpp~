#include "ugvParam.h"

using namespace std;
using namespace ros;

void updateWheelSpeed(int32_t id, int16_t high, int16_t low) {
    if(id == 0x201) 
        currentWheelSpeed[0] = (high<<8) | (low);
    else if(id == 0x202) 
	currentWheelSpeed[1] = 0 - (high<<8) | (low);		
    else if(id == 0x203) 
        currentWheelSpeed[2] = 0 - ((high<<8) | (low));		
    else if(id == 0x204) 
        currentWheelSpeed[3] = ((high<<8) | (low));		
} 

void keyboard_speed_callback(const geometry_msgs::Twist& msg) {

    pid1 -> set_point(msg.linear.x * 400);
    pid2 -> set_point(msg.linear.x * 400);
    pid3 -> set_point(msg.linear.x * 400);
    pid4 -> set_point(msg.linear.x * 400);

}

void targetWheelSpeed_callback(const geometry_msgs::Quaternion& msg){

    targetWheelSpeed[0] = msg.x;
    targetWheelSpeed[1] = msg.y;
    targetWheelSpeed[2] = msg.z;
    targetWheelSpeed[3] = msg.w;

    pid1 -> set_point(msg.x);
    pid2 -> set_point(msg.y);
    pid3 -> set_point(msg.z);
    pid4 -> set_point(msg.w);

    //cout << "Target wheel speed updated!" << endl;
}

void targetBodyVelocityCallback(const geometry_msgs::Vector3& msg){

    targetBodyVelocity[0] = msg.x;
    targetBodyVelocity[1] = msg.y;
    targetBodyVelocity[2] = msg.z;



}
void sensorDataCallback(const nav_msgs::Odometry& msg){

    currentBodyVelocity[0] = msg.twist.twist.linear.x;
    currentBodyVelocity[1] = msg.twist.twist.linear.y;
    currentBodyVelocity[2] = msg.twist.twist.angular.z;

    Quaterniond ori(msg->pose.pose.orientation.w, msg->pose.pose.orientation.x,msg->pose.pose.orientation.y,msg->pose.pose.orientation.z);
    Matrix3d Rgi = ori.toRotationMatrix();
    float phi = asin(Rgi(2,1));
    yaw = acos(Rgi(1,1)/cos(phi));




}

void trim(float &data, float limit) {

    if(data > limit)
	data = limit;
    if(data < -limit)
	data = -limit;
}

void get_control(int16_t *current, int16_t *target) {
	
    int16_t error1 = abs(current[0] - target[0]);
    int16_t error2 = abs(current[1] - target[1]);
    int16_t error3 = abs(current[2] - target[2]);
    int16_t error4 = abs(current[3] - target[3]);

    #ifdef DEBUG
    error.x = target[0] - current[0]; 
    error.y = target[1] - current[1];
    error.z = target[2] - current[2];
    error.w = target[3] - current[3];
    
    cout << "Errors:" << endl 
	 <<   error1  << endl 
	 <<   error2  << endl
	 <<   error3  << endl
	 <<   error4  << endl;
    #endif

    if(error1 > threshold)
        ctrl[0] = pid1 -> update(current[0], dt);	
    if(error2 > threshold)
        ctrl[1] = pid2 -> update(current[1], dt);	
    if(error3 > threshold)
	ctrl[2] = pid3 -> update(current[2], dt);	
    if(error4 > threshold)
	ctrl[3] = pid4 -> update(current[3], dt);	

    /* Limit control signals */
    trim(ctrl[0], pid_ctrl_limit);
    trim(ctrl[1], pid_ctrl_limit);
    trim(ctrl[2], pid_ctrl_limit);
    trim(ctrl[3], pid_ctrl_limit);
}

void send_speed(int first, int second, int third, int fourth, VCI_CAN_OBJ &send) 
{ 
    // front_left   front_right   bottom_right   bottom_left 
    //     1             2             3             4

    second = 0 - second;
    third = 0 - third;

    // First wheel
    if(first >= 0) {
	send.Data[0] = (int)(first/256);
	send.Data[1] = first & 0x00ff;
    }
    else {
	int tmp = 0 - (int)(first/256);
	send.Data[0] = 0 - (tmp+1);
	send.Data[1] = first & 0x00ff;
    }

    // Second wheel
    if(second >= 0) {
	send.Data[2] = (int)(second/256);
	send.Data[3] = second & 0x00ff;
    }
    else {
	int tmp = 0 - (int)(second/256);
	send.Data[2] = 0 - (tmp+1);
	send.Data[3] = second & 0x00ff;
    }

    // Third wheel
    if(third >= 0) {
	send.Data[4] = (int)(third/256);
	send.Data[5] = third & 0x00ff;
    }
    else {
	int tmp = 0 - (int)(third/256);
	send.Data[4] = 0 - (tmp+1);
	send.Data[5] = third & 0x00ff;
    }

    // Fourth wheel
    if(fourth >= 0) {
	send.Data[6] = (int)(fourth/256);
	send.Data[7] = fourth & 0x00ff;
    }
    else {
	int tmp = 0 - (int)(fourth/256);
	send.Data[6] = 0 - (tmp+1);
	send.Data[7] = fourth & 0x00ff;
    }
}


int main(int argc, char *argv[]) {


   
    ros::init(argc, argv, "ugv_node");
    ros::NodeHandle n;

    #ifdef DEBUG
    pid_param_pub = n.advertise<geometry_msgs::Vector3>("/pid_param", 1);
    speed_pub = n.advertise<geometry_msgs::Quaternion>("/speed", 1);
    control_pub = n.advertise<geometry_msgs::Quaternion>("/control", 1);
    error_pub = n.advertise<geometry_msgs::Quaternion>("/error", 1);
    can_receive_pub = n.advertise<std_msgs::String>("can_transmit", 1);
    #endif
    //target_speed_sub = n.subscribe("/ugv_target_speed", 1, targetWheelSpeed_callback);
    //keyboard_speed_sub = n.subscribe("/cmd_vel", 1, keyboard_speed_callback);
    
    targetBodyVelocity_sub = n.subscribe("/ugv_targetBodyVelocity", 1, targetBodyVelocityCallback);
    sensorData_sub = n.subscribe("/n3_sdk/odometry", 1, sensorDataCallback);

    pid1 = new PID( Kp1, Ki1, Kd1, -integralLimit, integralLimit, -pid_ctrl_limit, pid_ctrl_limit, false);
    pid2 = new PID( Kp1, Ki1, Kd1, -integralLimit, integralLimit, -pid_ctrl_limit, pid_ctrl_limit, false);
    pid3 = new PID( Kp2, Ki2, Kd2, -integralLimit, integralLimit, -pid_ctrl_limit, pid_ctrl_limit, false);
    pid4 = new PID( Kp2, Ki2, Kd2, -integralLimit, integralLimit, -pid_ctrl_limit, pid_ctrl_limit, false);

    pid1 -> set_point(targetWheelSpeed[0]);
    pid2 -> set_point(targetWheelSpeed[1]);
    pid3 -> set_point(targetWheelSpeed[2]);
    pid4 -> set_point(targetWheelSpeed[3]);

    if(VCI_OpenDevice(VCI_USBCAN2, 0, 0) == 1)
	printf(">>open deivce success!\n");
    else {
	printf(">>open deivce error!\n");
	exit(1);
    }

    if(VCI_ReadBoardInfo(VCI_USBCAN2, 0, &pInfo) == 1) 
        printf(">>Get VCI_ReadBoardInfo success!\n");
    else {
	printf(">>Get VCI_ReadBoardInfo error!\n");
	exit(1);
    }

    VCI_INIT_CONFIG config;
    config.AccCode = 0;
    config.AccMask = 0xffffffff;
    config.Filter = 1;
    config.Mode = 0;

    /*1Mbps  0x14  0x00*/	
    config.Timing0 = 0x00;
    config.Timing1 = 0x14;
	
    if(VCI_InitCAN(VCI_USBCAN2, 0, 0, &config) != 1) {
	printf("init CAN error\n");
	VCI_CloseDevice(VCI_USBCAN2, 0);
    }
    
    if(VCI_StartCAN(VCI_USBCAN2, 0, 0) != 1) {
        printf("Start CAN error\n");
	VCI_CloseDevice(VCI_USBCAN2, 0);
    }
	
    /* Config */
    VCI_CAN_OBJ sendData;
    sendData.ID = 0x200;
    sendData.SendType = 2;
    sendData.RemoteFlag = 0;
    sendData.ExternFlag = 0;
    sendData.DataLen = 8;

    
    ros::Rate loop_rate(100);					

    int first, second, third, fourth = 0;
    int averSpeed1, averSpeed2, averSpeed3, averSpeed4 = 0;
    int loopNumber = 0;
    //send_speed(800,800,800,800, sendData);

    /* Major loop */
    while (ros::ok()) {

	DWORD dwRel;
	dwRel = VCI_ClearBuffer(VCI_USBCAN2, 0 , 0);
        #ifdef DEBUG
    	pid_param_pub.publish(pid_param);
    	speed_pub.publish(speed);
    	control_pub.publish(control);
    	error_pub.publish(error);
        #endif

    	loopNumber++;
    
    	int reclen=0;
    	VCI_CAN_OBJ rec[160];
    	int i;
	
    	//printf("running....\n");
		    
	first = second = third = fourth = 0;
	averSpeed1 = averSpeed2 = averSpeed3 = averSpeed4 = 0;

    	/* Receive */
    	if((reclen=VCI_Receive(VCI_USBCAN2,0,0,rec,160,0))>0) {

	    // Print info for each frame
	    for (int j=0; j<reclen; j++){
	        // Print CAN ID
	        //printf("Receive: %08X \n", rec[j].ID);
	    
	        // Print frame numbers	
	        //printf("\n Received %d frames \n", reclen);

	        for(int p = 0; p < rec[reclen-1].DataLen; p++) // Print the data under this CAN ID
            	    printf(" %08X", rec[j].Data[p]);

	        updateWheelSpeed(rec[j].ID, rec[j].Data[2], rec[j].Data[3]);
	  

 	        if (rec[j].ID == 0x201) {
	    	    averSpeed1 += currentWheelSpeed[0];
		    first++;
	        }
	        else if (rec[j].ID == 0x202) {
		    averSpeed2 += currentWheelSpeed[1];
		    second++;
	        }
	        else if (rec[j].ID == 0x203) {
		    averSpeed3 += currentWheelSpeed[2];
		    third++;
	        }
	        else if (rec[j].ID == 0x204) {
		    averSpeed4 += currentWheelSpeed[3];
		    fourth++;
	        }

	        //printf("\n first: %d \n", first);
	        //printf("second: %d \n", second);
	        //printf("third: %d \n", third);
	        //printf("fourth: %d \n", fourth);

	        printf("Real speed is %d\n %d\n %d\n %d\n", currentWheelSpeed[0], currentWheelSpeed[1], currentWheelSpeed[2], currentWheelSpeed[3]);
	    }

	    /* Calculate average speed */
	    if (first != 0)
		averSpeed1 /= first;
	    else
	    	averSpeed1 = currentWheelSpeed[0];
   	    if (second != 0)
		averSpeed2 /= second;
	    else
	    	averSpeed2 = currentWheelSpeed[1];
   	    if (third != 0)
		averSpeed3 /= third;
	    else
	    	averSpeed3 = currentWheelSpeed[2];
   	    if (fourth != 0) 
		averSpeed4 /= fourth;
	    else
	    	averSpeed4 = currentWheelSpeed[3];
	    
	    currentWheelSpeed[0] = averSpeed1;
	    currentWheelSpeed[1] = averSpeed2;
	    currentWheelSpeed[2] = averSpeed3;
	    currentWheelSpeed[3] = averSpeed4;
        }	

        get_control(currentWheelSpeed, targetWheelSpeed);

        send_speed(ctrl[0], ctrl[1], ctrl[2], ctrl[3], sendData);
        //send_speed(10000, 10000, 0, 0, sendData);

        usleep(2000);

        /* Transmit */		
        if(VCI_Transmit(VCI_USBCAN2, 0, 0, &sendData, 1) > 0) {

	    //printf("CAN 1 ID: %08X\r\n",sendData.ID);
	    //printf("CAN 1 data :\r\n");

	    for(i=0;i<sendData.DataLen;i++) {
                printf(" %08X",sendData.Data[i]);
	        //printf(" Decimal: %d",sendData.Data[i]);
	    }

	    printf("\n");
	
        }

    else
        break;
	#ifdef DEBUG
    	pid_param.x = Kp1;
    	pid_param.y = Ki1;
    	pid_param.z = Kd1;

    	speed.x = currentWheelSpeed[0];
    	speed.y = currentWheelSpeed[1];
    	speed.z = currentWheelSpeed[2];
    	speed.w = currentWheelSpeed[3];

    	control.x = ctrl[0];
    	control.y = ctrl[1];
    	control.z = ctrl[2];
    	control.w = ctrl[3];
    
        cout << "Control signals: " 
	     << ctrl[0] << endl
	     << ctrl[1] << endl
	     << ctrl[2] << endl 
	     << ctrl[3] << endl;
    
    	pid_param_pub.publish(pid_param);
    	speed_pub.publish(speed);
    	control_pub.publish(control);
    	error_pub.publish(error);
        #endif
		
        ros::spinOnce();
        loop_rate.sleep();

    } // End of while loop


    printf("\n Terminating... \n");
    DWORD dwRel2;
    printf("Clearing buffer... \n");
    dwRel2 = VCI_ClearBuffer(VCI_USBCAN2, 0 , 0);
    VCI_CloseDevice(VCI_USBCAN2,0);
    //ext:	
    //VCI_CloseDevice(VCI_USBCAN2,0);
}

