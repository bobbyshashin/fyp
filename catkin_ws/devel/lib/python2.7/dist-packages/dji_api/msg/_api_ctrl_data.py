# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_api/api_ctrl_data.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class api_ctrl_data(genpy.Message):
  _md5sum = "17a4210b32e15b6ae5ea3f62362227fa"
  _type = "dji_api/api_ctrl_data"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 ctrl_flag
int8    horiz_mode
int8    vert_mode
int8    yaw_mode
int8    level_frame
int8    torsion_frame
geometry_msgs/QuaternionStamped ctrl_data




================================================================================
MSG: geometry_msgs/QuaternionStamped
# This represents an orientation with reference coordinate frame and timestamp.

Header header
Quaternion quaternion

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['ctrl_flag','horiz_mode','vert_mode','yaw_mode','level_frame','torsion_frame','ctrl_data']
  _slot_types = ['float32','int8','int8','int8','int8','int8','geometry_msgs/QuaternionStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ctrl_flag,horiz_mode,vert_mode,yaw_mode,level_frame,torsion_frame,ctrl_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(api_ctrl_data, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ctrl_flag is None:
        self.ctrl_flag = 0.
      if self.horiz_mode is None:
        self.horiz_mode = 0
      if self.vert_mode is None:
        self.vert_mode = 0
      if self.yaw_mode is None:
        self.yaw_mode = 0
      if self.level_frame is None:
        self.level_frame = 0
      if self.torsion_frame is None:
        self.torsion_frame = 0
      if self.ctrl_data is None:
        self.ctrl_data = geometry_msgs.msg.QuaternionStamped()
    else:
      self.ctrl_flag = 0.
      self.horiz_mode = 0
      self.vert_mode = 0
      self.yaw_mode = 0
      self.level_frame = 0
      self.torsion_frame = 0
      self.ctrl_data = geometry_msgs.msg.QuaternionStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_f5b3I.pack(_x.ctrl_flag, _x.horiz_mode, _x.vert_mode, _x.yaw_mode, _x.level_frame, _x.torsion_frame, _x.ctrl_data.header.seq, _x.ctrl_data.header.stamp.secs, _x.ctrl_data.header.stamp.nsecs))
      _x = self.ctrl_data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d.pack(_x.ctrl_data.quaternion.x, _x.ctrl_data.quaternion.y, _x.ctrl_data.quaternion.z, _x.ctrl_data.quaternion.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ctrl_data is None:
        self.ctrl_data = geometry_msgs.msg.QuaternionStamped()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.ctrl_flag, _x.horiz_mode, _x.vert_mode, _x.yaw_mode, _x.level_frame, _x.torsion_frame, _x.ctrl_data.header.seq, _x.ctrl_data.header.stamp.secs, _x.ctrl_data.header.stamp.nsecs,) = _struct_f5b3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ctrl_data.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ctrl_data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.ctrl_data.quaternion.x, _x.ctrl_data.quaternion.y, _x.ctrl_data.quaternion.z, _x.ctrl_data.quaternion.w,) = _struct_4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_f5b3I.pack(_x.ctrl_flag, _x.horiz_mode, _x.vert_mode, _x.yaw_mode, _x.level_frame, _x.torsion_frame, _x.ctrl_data.header.seq, _x.ctrl_data.header.stamp.secs, _x.ctrl_data.header.stamp.nsecs))
      _x = self.ctrl_data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d.pack(_x.ctrl_data.quaternion.x, _x.ctrl_data.quaternion.y, _x.ctrl_data.quaternion.z, _x.ctrl_data.quaternion.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ctrl_data is None:
        self.ctrl_data = geometry_msgs.msg.QuaternionStamped()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.ctrl_flag, _x.horiz_mode, _x.vert_mode, _x.yaw_mode, _x.level_frame, _x.torsion_frame, _x.ctrl_data.header.seq, _x.ctrl_data.header.stamp.secs, _x.ctrl_data.header.stamp.nsecs,) = _struct_f5b3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ctrl_data.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ctrl_data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.ctrl_data.quaternion.x, _x.ctrl_data.quaternion.y, _x.ctrl_data.quaternion.z, _x.ctrl_data.quaternion.w,) = _struct_4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d = struct.Struct("<4d")
_struct_f5b3I = struct.Struct("<f5b3I")
