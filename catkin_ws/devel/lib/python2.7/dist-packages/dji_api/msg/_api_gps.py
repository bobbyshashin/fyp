# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_api/api_gps.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class api_gps(genpy.Message):
  _md5sum = "782f87212da4c55448495f3a43afd880"
  _type = "dji_api/api_gps"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 longti
float64 lati
float32 alti
float32 height
int8 health_flag
"""
  __slots__ = ['longti','lati','alti','height','health_flag']
  _slot_types = ['float64','float64','float32','float32','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       longti,lati,alti,height,health_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(api_gps, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.longti is None:
        self.longti = 0.
      if self.lati is None:
        self.lati = 0.
      if self.alti is None:
        self.alti = 0.
      if self.height is None:
        self.height = 0.
      if self.health_flag is None:
        self.health_flag = 0
    else:
      self.longti = 0.
      self.lati = 0.
      self.alti = 0.
      self.height = 0.
      self.health_flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2d2fb.pack(_x.longti, _x.lati, _x.alti, _x.height, _x.health_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.longti, _x.lati, _x.alti, _x.height, _x.health_flag,) = _struct_2d2fb.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2d2fb.pack(_x.longti, _x.lati, _x.alti, _x.height, _x.health_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.longti, _x.lati, _x.alti, _x.height, _x.health_flag,) = _struct_2d2fb.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d2fb = struct.Struct("<2d2fb")
