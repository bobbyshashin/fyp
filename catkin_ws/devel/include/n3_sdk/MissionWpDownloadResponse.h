// Generated by gencpp from file n3_sdk/MissionWpDownloadResponse.msg
// DO NOT EDIT!


#ifndef N3_SDK_MESSAGE_MISSIONWPDOWNLOADRESPONSE_H
#define N3_SDK_MESSAGE_MISSIONWPDOWNLOADRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <n3_sdk/MissionWaypointTask.h>

namespace n3_sdk
{
template <class ContainerAllocator>
struct MissionWpDownloadResponse_
{
  typedef MissionWpDownloadResponse_<ContainerAllocator> Type;

  MissionWpDownloadResponse_()
    : waypoint_task()  {
    }
  MissionWpDownloadResponse_(const ContainerAllocator& _alloc)
    : waypoint_task(_alloc)  {
  (void)_alloc;
    }



   typedef  ::n3_sdk::MissionWaypointTask_<ContainerAllocator>  _waypoint_task_type;
  _waypoint_task_type waypoint_task;




  typedef boost::shared_ptr< ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MissionWpDownloadResponse_

typedef ::n3_sdk::MissionWpDownloadResponse_<std::allocator<void> > MissionWpDownloadResponse;

typedef boost::shared_ptr< ::n3_sdk::MissionWpDownloadResponse > MissionWpDownloadResponsePtr;
typedef boost::shared_ptr< ::n3_sdk::MissionWpDownloadResponse const> MissionWpDownloadResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace n3_sdk

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'n3_sdk': ['/home/ubuntu/fyp/catkin_ws/src/ugv/n3_sdk/msg', '/home/ubuntu/fyp/catkin_ws/devel/share/n3_sdk/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c965e82a72d204e1e6d1e75389efb89";
  }

  static const char* value(const ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c965e82a72d204eULL;
  static const uint64_t static_value2 = 0x1e6d1e75389efb89ULL;
};

template<class ContainerAllocator>
struct DataType< ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "n3_sdk/MissionWpDownloadResponse";
  }

  static const char* value(const ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MissionWaypointTask waypoint_task\n\
\n\
\n\
================================================================================\n\
MSG: n3_sdk/MissionWaypointTask\n\
float32 velocity_range\n\
float32 idle_velocity\n\
uint8 action_on_finish\n\
uint8 mission_exec_times\n\
uint8 yaw_mode\n\
uint8 trace_mode\n\
uint8 action_on_rc_lost\n\
uint8 gimbal_pitch_mode\n\
MissionWaypoint[] mission_waypoint\n\
\n\
================================================================================\n\
MSG: n3_sdk/MissionWaypoint\n\
float64 latitude\n\
float64 longitude\n\
float32 altitude\n\
float32 damping_distance\n\
int16 target_yaw\n\
int16 target_gimbal_pitch\n\
uint8 turn_mode\n\
uint8 has_action\n\
uint16 action_time_limit\n\
MissionWaypointAction waypoint_action\n\
\n\
================================================================================\n\
MSG: n3_sdk/MissionWaypointAction\n\
uint8 action_repeat\n\
uint8[15] command_list\n\
int16[15] command_parameter\n\
";
  }

  static const char* value(const ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.waypoint_task);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionWpDownloadResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::n3_sdk::MissionWpDownloadResponse_<ContainerAllocator>& v)
  {
    s << indent << "waypoint_task: ";
    s << std::endl;
    Printer< ::n3_sdk::MissionWaypointTask_<ContainerAllocator> >::stream(s, indent + "  ", v.waypoint_task);
  }
};

} // namespace message_operations
} // namespace ros

#endif // N3_SDK_MESSAGE_MISSIONWPDOWNLOADRESPONSE_H
