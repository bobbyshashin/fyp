// Generated by gencpp from file dji_api/api_wrench.msg
// DO NOT EDIT!


#ifndef DJI_API_MESSAGE_API_WRENCH_H
#define DJI_API_MESSAGE_API_WRENCH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_api
{
template <class ContainerAllocator>
struct api_wrench_
{
  typedef api_wrench_<ContainerAllocator> Type;

  api_wrench_()
    : wx(0.0)
    , wy(0.0)
    , wz(0.0)  {
    }
  api_wrench_(const ContainerAllocator& _alloc)
    : wx(0.0)
    , wy(0.0)
    , wz(0.0)  {
  (void)_alloc;
    }



   typedef float _wx_type;
  _wx_type wx;

   typedef float _wy_type;
  _wy_type wy;

   typedef float _wz_type;
  _wz_type wz;




  typedef boost::shared_ptr< ::dji_api::api_wrench_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_api::api_wrench_<ContainerAllocator> const> ConstPtr;

}; // struct api_wrench_

typedef ::dji_api::api_wrench_<std::allocator<void> > api_wrench;

typedef boost::shared_ptr< ::dji_api::api_wrench > api_wrenchPtr;
typedef boost::shared_ptr< ::dji_api::api_wrench const> api_wrenchConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_api::api_wrench_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_api::api_wrench_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dji_api

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'dji_api': ['/home/bobby/fyp/catkin_ws/src/dji_api/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dji_api::api_wrench_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_api::api_wrench_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_api::api_wrench_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_api::api_wrench_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_api::api_wrench_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_api::api_wrench_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_api::api_wrench_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48d31eabbcefc0c5c4bd8b442da24d53";
  }

  static const char* value(const ::dji_api::api_wrench_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48d31eabbcefc0c5ULL;
  static const uint64_t static_value2 = 0xc4bd8b442da24d53ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_api::api_wrench_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_api/api_wrench";
  }

  static const char* value(const ::dji_api::api_wrench_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_api::api_wrench_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 wx\n\
float32 wy\n\
float32 wz\n\
";
  }

  static const char* value(const ::dji_api::api_wrench_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_api::api_wrench_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wx);
      stream.next(m.wy);
      stream.next(m.wz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct api_wrench_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_api::api_wrench_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_api::api_wrench_<ContainerAllocator>& v)
  {
    s << indent << "wx: ";
    Printer<float>::stream(s, indent + "  ", v.wx);
    s << indent << "wy: ";
    Printer<float>::stream(s, indent + "  ", v.wy);
    s << indent << "wz: ";
    Printer<float>::stream(s, indent + "  ", v.wz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_API_MESSAGE_API_WRENCH_H
