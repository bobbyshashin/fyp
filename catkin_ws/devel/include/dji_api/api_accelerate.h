// Generated by gencpp from file dji_api/api_accelerate.msg
// DO NOT EDIT!


#ifndef DJI_API_MESSAGE_API_ACCELERATE_H
#define DJI_API_MESSAGE_API_ACCELERATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_api
{
template <class ContainerAllocator>
struct api_accelerate_
{
  typedef api_accelerate_<ContainerAllocator> Type;

  api_accelerate_()
    : agx(0.0)
    , agy(0.0)
    , agz(0.0)  {
    }
  api_accelerate_(const ContainerAllocator& _alloc)
    : agx(0.0)
    , agy(0.0)
    , agz(0.0)  {
  (void)_alloc;
    }



   typedef float _agx_type;
  _agx_type agx;

   typedef float _agy_type;
  _agy_type agy;

   typedef float _agz_type;
  _agz_type agz;




  typedef boost::shared_ptr< ::dji_api::api_accelerate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_api::api_accelerate_<ContainerAllocator> const> ConstPtr;

}; // struct api_accelerate_

typedef ::dji_api::api_accelerate_<std::allocator<void> > api_accelerate;

typedef boost::shared_ptr< ::dji_api::api_accelerate > api_acceleratePtr;
typedef boost::shared_ptr< ::dji_api::api_accelerate const> api_accelerateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_api::api_accelerate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_api::api_accelerate_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dji_api

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'dji_api': ['/home/bobby/fyp/catkin_ws/src/dji_api/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dji_api::api_accelerate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_api::api_accelerate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_api::api_accelerate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_api::api_accelerate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_api::api_accelerate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_api::api_accelerate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_api::api_accelerate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "03df7652de8ef3fd3e268967730bab29";
  }

  static const char* value(const ::dji_api::api_accelerate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x03df7652de8ef3fdULL;
  static const uint64_t static_value2 = 0x3e268967730bab29ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_api::api_accelerate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_api/api_accelerate";
  }

  static const char* value(const ::dji_api::api_accelerate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_api::api_accelerate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 agx\n\
float32 agy\n\
float32 agz\n\
";
  }

  static const char* value(const ::dji_api::api_accelerate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_api::api_accelerate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.agx);
      stream.next(m.agy);
      stream.next(m.agz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct api_accelerate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_api::api_accelerate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_api::api_accelerate_<ContainerAllocator>& v)
  {
    s << indent << "agx: ";
    Printer<float>::stream(s, indent + "  ", v.agx);
    s << indent << "agy: ";
    Printer<float>::stream(s, indent + "  ", v.agy);
    s << indent << "agz: ";
    Printer<float>::stream(s, indent + "  ", v.agz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_API_MESSAGE_API_ACCELERATE_H
