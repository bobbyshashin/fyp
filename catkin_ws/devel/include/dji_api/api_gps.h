// Generated by gencpp from file dji_api/api_gps.msg
// DO NOT EDIT!


#ifndef DJI_API_MESSAGE_API_GPS_H
#define DJI_API_MESSAGE_API_GPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_api
{
template <class ContainerAllocator>
struct api_gps_
{
  typedef api_gps_<ContainerAllocator> Type;

  api_gps_()
    : longti(0.0)
    , lati(0.0)
    , alti(0.0)
    , height(0.0)
    , health_flag(0)  {
    }
  api_gps_(const ContainerAllocator& _alloc)
    : longti(0.0)
    , lati(0.0)
    , alti(0.0)
    , height(0.0)
    , health_flag(0)  {
  (void)_alloc;
    }



   typedef double _longti_type;
  _longti_type longti;

   typedef double _lati_type;
  _lati_type lati;

   typedef float _alti_type;
  _alti_type alti;

   typedef float _height_type;
  _height_type height;

   typedef int8_t _health_flag_type;
  _health_flag_type health_flag;




  typedef boost::shared_ptr< ::dji_api::api_gps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_api::api_gps_<ContainerAllocator> const> ConstPtr;

}; // struct api_gps_

typedef ::dji_api::api_gps_<std::allocator<void> > api_gps;

typedef boost::shared_ptr< ::dji_api::api_gps > api_gpsPtr;
typedef boost::shared_ptr< ::dji_api::api_gps const> api_gpsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_api::api_gps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_api::api_gps_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dji_api

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'dji_api': ['/home/bobby/fyp/catkin_ws/src/dji_api/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dji_api::api_gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_api::api_gps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_api::api_gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_api::api_gps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_api::api_gps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_api::api_gps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_api::api_gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "782f87212da4c55448495f3a43afd880";
  }

  static const char* value(const ::dji_api::api_gps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x782f87212da4c554ULL;
  static const uint64_t static_value2 = 0x48495f3a43afd880ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_api::api_gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_api/api_gps";
  }

  static const char* value(const ::dji_api::api_gps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_api::api_gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 longti\n\
float64 lati\n\
float32 alti\n\
float32 height\n\
int8 health_flag\n\
";
  }

  static const char* value(const ::dji_api::api_gps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_api::api_gps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.longti);
      stream.next(m.lati);
      stream.next(m.alti);
      stream.next(m.height);
      stream.next(m.health_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct api_gps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_api::api_gps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_api::api_gps_<ContainerAllocator>& v)
  {
    s << indent << "longti: ";
    Printer<double>::stream(s, indent + "  ", v.longti);
    s << indent << "lati: ";
    Printer<double>::stream(s, indent + "  ", v.lati);
    s << indent << "alti: ";
    Printer<float>::stream(s, indent + "  ", v.alti);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "health_flag: ";
    Printer<int8_t>::stream(s, indent + "  ", v.health_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_API_MESSAGE_API_GPS_H
